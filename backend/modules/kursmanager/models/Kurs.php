<?phpnamespace backend\modules\kursmanager\models;use backend\modules\categorymanager\models\Category;use backend\modules\categorymanager\models\SubCategory;use backend\modules\kursmanager\behaviors\EnrollBehavior;use backend\modules\kursmanager\models\query\EnrollQuery;use backend\modules\kursmanager\models\traits\KursCommentRatingTrait;use backend\modules\kursmanager\query\KursQuery;use common\models\User;use mohorev\file\UploadImageBehavior;use soft\behaviors\CyrillicSlugBehavior;use soft\db\SActiveQuery;use soft\db\SActiveRecord;use Yii;use yii\caching\TagDependency;use yii\helpers\ArrayHelper;use yii\helpers\Html;//<editor-fold desc="Attributes" defaultstate="collapsed">/** * This is the model class for table "kurs". * * @property int $id * @property string $title * @property string|null $short_description * @property string|null $description * @property int|null $category_id * @property string|null $level * @property string|null $language * @property int|null $is_best * @property int|null $is_free * @property int|null $price * @property string|null $preview_host * @property string|null $preview_link * @property string|null $image * @property string|null $meta_keywords * @property string|null $meta_description * @property int|null $user_id * @property int|null $created_at * @property int|null $updated_at * @property int|null $status * @property string|null $benefits * @property string|null $requirements * @property string|null $slug * * @property Category $category * @property User $user * @property Section[] $sections * @property int $old_price [int(11)] * @property-read null|string $kursImage * @property-read null|string|int $statusLabel * @property-read null|string|int $statusText * @property-read mixed $levelText * @property-read mixed $languageText * @property-read mixed $formattedPrice * @property-read mixed $hasImage * @property-read string $imagePath * @property-read bool $hasBenefits * @property-read bool $hasRequirements * @property-read array $benefitsList * @property-read array $requirementsList * @property-read array $requirementsAsArray * @property-read array $benefitsAsArray * @property bool $deleted [tinyint(4)] * @property int $enrolls_count [int(11)] * @property int $free_duration [int(11)]  Ushbu kursga birinchi marta a'zo bo'lganlar uchun ma'lum bir vaqt davomida bepul foydalanish * @property-read mixed $enrolls * @property-read mixed $freeDurationText * @property-read bool $hasFreeDuration * @property-read mixed $durationText * @property-read SubCategory $subCategory * @property-read null|string $freeDurationTimestamp * @property-read Enroll|null $userEnroll * @property-read mixed $enrollsCount * @property-read bool $userHasEnrolled * @property-read null|string $enrollEndingTime * @property-read bool $hasDiscount * @property-read string $formattedOldPrice * @property string $duration [varchar(50)]  Ushbu kursga a'zo bo'lgandan keyin foydalanish vaqti * @property-read string $titleWithUserFullName * @property-read bool $isWaiting * @property-read bool $isConfirmed * @property-read bool $hasActiveEnrolls * @property-read mixed $activeEnrolls * @property-read mixed $lessons * @property-read mixed $activeLessons * @property-read null $lastSeenLesson * @property-read mixed $activeSections * @property-read mixed $activeLessonsCount * @property-read mixed $formattedActiveLessonsDuration * @property-read mixed $formattedVideosDuration * @property-read mixed $activeLessonsDuration * @property-read null|bool|string|int $videosCount * @property-read \yii\db\ActiveQuery $lessonsHasVideos * @property-read null|bool|string|mixed|int $videosDuration * @property-read mixed $activeSectionsCount * @property-read mixed $sectionsCount * @property-read mixed $lessonsCount * @property-read bool $isWished * @property-read mixed $enrolledUsers * @property-read Lesson[] $completedLessons * @property-read int $completedLessonsCount * @property-read int $completedPercent * @property-read bool $userHasActiveEnroll * @property-read null|Lesson $lastActiveLesson * @property int $published_at [int(11)] * * @property \backend\models\Rating[] $ratings * @property \backend\models\Rating[] $validRatings * @property-read bool $isBestSeller * @property float $averageRating * @property int $intvalAverageRating * @property int $ratingsCount * @property-read array[] $featuresList * @property-read int $discountPercent * @property-read User[] $authors * @property int $activeCommentsCount * * @method getThumbUploadUrl(string $string) @see mohorev\file\UploadImageBehavior::getThumbUploadUrl() *///</editor-fold>class Kurs extends SActiveRecord{    use KursCommentRatingTrait;    public const STATUS_INACTIVE = 0;    public const STATUS_ACTIVE = 1;    public const STATUS_WAITING = 5;    //<editor-fold desc="Parent methods" defaultstate="collapsed">    public static function tableName()    {        return 'kurs';    }    public function scenarios()    {        $scenarios = parent::scenarios();        $scenarios['updateEnrollsCount'] = ['enrolls_count'];        $scenarios['changeStatus'] = ['status'];        return $scenarios;    }    public function behaviors()    {        return array_merge(parent::behaviors(), [            [                'class' => CyrillicSlugBehavior::class,            ],            [                'class' => UploadImageBehavior::class,                'attribute' => 'image',                'scenarios' => ['teacher-form', 'default'],                'path' => '@frontend/web/uploads/course/{id}',                'url' => '/uploads/course/{id}',                'unlinkOnDelete' => true,                'deleteOriginalFile' => true,                'thumbs' => [                    'thumb' => ['width' => 370, 'quality' => 100],                ],            ],        ]);    }    public function rules()    {        return [            [['title', 'category_id', 'duration'], 'required'],            [['short_description', 'description', 'meta_keywords', 'meta_description'], 'string'],            ['duration', 'string', 'max' => 50],            ['duration', 'in', 'range' => array_keys(Yii::$app->site->getKursDurations())],            [['category_id', 'is_best', 'is_free', 'price', 'user_id', 'created_at', 'updated_at', 'status', 'old_price', 'deleted',], 'integer'],            ['free_duration', 'integer', 'min' => 0, 'max' => 30],            [['title', 'preview_host', 'preview_link'], 'string', 'max' => 255],            [['level'], 'string', 'max' => 100],            ['level', 'in', 'range' => array_keys(Yii::$app->site->getKursLevels())],            [['language'], 'string', 'max' => 50],            ['language', 'in', 'range' => array_keys(Yii::$app->site->getKursLanguages())],            [['slug'], 'string', 'max' => 150],            [['benefits', 'requirements'], 'safe'],            ['image', 'image', 'extensions' => 'jpg, jpeg, gif, png'],            [['category_id'], 'exist', 'skipOnError' => true, 'targetClass' => SubCategory::className(), 'targetAttribute' => ['category_id' => 'id']],            [['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['user_id' => 'id']],        ];    }    public function setAttributeLabels()    {        return [            'title' => 'Kurs nomi',            'short_description' => 'Qisqa tavsif',            'description' => 'Batafsil',            'category_id' => 'Kategoriya',            'category.title' => 'Kategoriya',            'level' => 'Daraja',            'levelText' => 'Daraja',            'durationText' => "A'zolikning davomiyligi",            'statusLabel' => 'Holat',            'language' => 'Til',            'languageText' => 'Til',            'is_best' => 'Eng axshi',            'is_free' => 'Bepul',            'price' => 'Sotuvdagi narxi',            'old_price' => 'Eski narx',            'preview_host' => 'Overview provayder',            'preview_link' => 'Overview link',            'meta_keywords' => 'Meta kalit so`zlar',            'meta_description' => 'Meta tavsif',            'benefits' => 'Foydalar',            'benefitsAsArray' => 'Foydalar',            'benefitsList' => 'Foydalar',            'requirements' => 'Talablar',            'requirementsAsArray' => 'Talablar',            'requirementsList' => 'Talablar',            'duration' => "A'zolikning davomiyligi",        ];    }    public function setAttributeNames()    {        return [            'createdAtAttribute' => 'created_at',            'updatedAtAttribute' => 'updated_at',            'createdByAttribute' => 'user_id',            'invalidateCacheTags' => ['kurs'],        ];    }    public static function find()    {        return new KursQuery(get_called_class());    }    public function beforeDelete()    {        if (!parent::beforeDelete()) {            return false;        }        $sections = $this->sections;        foreach ($sections as $section) {            /**             * @see Section::beforeDelete()             **/            $section->delete();        }        return true;    }    //</editor-fold>    //<editor-fold desc="Custom methods" defaultstate="collapsed">    /**     * Modelni saqlash uchun tayyorlash     * Kursni formasida `requirements` va `benefits` attributlari uchun MultipleWidget ishlatilgan     * Shu widgetdan kelgan datani json_encode qilib bazaga saqlanadi     */    public function prepareToSave()    {        if (!empty($this->requirements)) {            $this->requirements = json_encode($this->requirements);        }        if (!empty($this->benefits)) {            $this->benefits = json_encode($this->benefits);        }    }    public function changeStatus()    {        $status = $this->status == self::STATUS_ACTIVE ? self::STATUS_INACTIVE : self::STATUS_ACTIVE;        $this->scenario = 'changeStatus';        $this->status = $status;        return $this->save();    }    /**     * Kutish holatidagi kursni faol holatga o'tkazadi     * @return bool     */    public function approve()    {        if (empty($this->published_at)) {            $this->published_at = time();        }        $this->status = self::STATUS_ACTIVE;        return $this->save(false);    }    /**     * Kursni kutish holatiga o'tkazadi     * @return bool     */    public function disapprove()    {        $this->status = self::STATUS_WAITING;        return $this->save(false);    }    //</editor-fold>    //<editor-fold desc="Relations" defaultstate="collapsed">    public function getSubCategory()    {        return $this->hasOne(SubCategory::className(), ['id' => 'category_id']);    }    public function getCategory()    {        return $this->hasOne(Category::class, ['id' => 'category_id'])->via('subCategory');    }    public function getUser()    {        return $this->hasOne(User::className(), ['id' => 'user_id']);    }    //</editor-fold>    //<editor-fold desc="Sections" defaultstate="collapsed">    public function getSections()    {        return Yii::$app->db->cache(function ($db) {            return $this->hasMany(Section::className(), ['kurs_id' => 'id']);        }, null, new TagDependency(['tags' => 'section']));    }    public function getSectionsCount()    {        return Yii::$app->db->cache(function ($db) {            return $this->getSections()->count();        }, null, new TagDependency(['tags' => 'section']));    }    public function getActiveSections()    {        return Yii::$app->db->cache(function ($db) {            return $this->getSections()->active();        }, null, new TagDependency(['tags' => ['section']]));    }    public function getActiveSectionsCount()    {        return Yii::$app->db->cache(function ($db) {            return $this->getActiveSections()->count();        }, null, new TagDependency(['tags' => 'section']));    }    // </editor-fold>    //<editor-fold desc="Lessons and videos" defaultstate="collapsed">    public function getLessons()    {        return $this->hasMany(Lesson::class, ['section_id' => 'id'])            ->via('sections')            ->addOrderBy(['sort' => SORT_ASC]);    }    public function getLessonsCount()    {        $count = Yii::$app->db->cache(function ($db) {            return $this->getLessons()->count();        }, null, new TagDependency(['tags' => 'lesson']));        return intval($count);    }    /**     * Videosi bor mavzular - barchasi     * @return \yii\db\ActiveQuery     */    public function getLessonsHasVideos()    {        return $this->getLessons()->andWhere(['>', 'lesson.media_duration', 0]);    }    /**     * Kursdagi videolar soni ( Videosi bor mavzular soni) - barchasi     * @return bool|int|string|null     * @throws \Throwable     */    public function getVideosCount()    {        $count = Yii::$app->db->cache(function ($db) {            return $this->getLessonsHasVideos()->count();        }, null, new TagDependency(['tags' => 'lesson']));        return intval($count);    }    /**     * kurs ichidagi videolarning davomiyligu     * @return bool|int|mixed|string|null     */    public function getVideosDuration()    {        $duration = Yii::$app->db->cache(function ($db) {            return $this->getLessonsHasVideos()->sum('media_duration');        }, null, new TagDependency(['tags' => 'lesson']));        return intval($duration);    }    public function getFormattedVideosDuration()    {        return Yii::$app->formatter->asGmtime($this->videosDuration);    }    /**     * Kurs ichidagi barcha active lessonlarni ularning joylashish tartibi bo'yicha oladi     * @return SActiveQuery     * @throws \Throwable     */    public function getActiveLessons()    {        return $this->hasMany(Lesson::class, ['section_id' => 'id'])            ->via('activeSections')            ->joinWith('section', false)            ->orderBy(['section.sort' => SORT_ASC, 'lesson.sort' => SORT_ASC])            ->active();    }    public function getActiveLessonsCount()    {        $count = Yii::$app->db->cache(function ($db) {            return $this->getActiveLessons()->count();        }, null, new TagDependency(['tags' => 'lesson']));        return intval($count);    }    public function getActiveLessonsDuration()    {        return Yii::$app->db->cache(function ($db) {            return $this->getActiveLessons()->sum('media_duration');        }, null, new TagDependency(['tags' => ['lesson']]));    }    public function getFormattedActiveLessonsDuration()    {        return Yii::$app->formatter->asGmtime($this->activeLessonsDuration);    }    // </editor-fold>    //<editor-fold desc="Enrolls" defaultstate="collapsed">    /**     * @return EnrollQuery     */    public function getEnrolls()    {        return $this->hasMany(Enroll::class, ['kurs_id' => 'id']);    }    public function getEnrolledUsers()    {        return $this->hasMany(User::class, ['id' => 'user_id'])->via('enrolls');    }    public function getActiveEnrolls()    {        return $this->getEnrolls()->nonExpired();    }    public function getHasActiveEnrolls()    {        return $this->getActiveEnrolls()->count() > 0;    }    public function getEnrollsCount()    {        $count = Yii::$app->db->cache(function ($db) {            return $this->getEnrolls()->count();        }, null, new TagDependency(['tags' => ['enroll']]));        return intval($count);    }    /**     * @return yii\db\ActiveQuery     */    public function getUserEnroll()    {        return $this->hasOne(Enroll::class, ['kurs_id' => 'id'])->andWhere(['enroll.user_id' => user('id')]);    }    public function getUserHasEnrolled()    {        return $this->userEnroll != null;    }    /**     * User ushbu kursga a'zo bo'lgan bo'lsa va hali a'zolik muddati tugamagan bo'lsa true qaytaradi     * @return bool     */    public function getUserHasActiveEnroll()    {        return $this->userHasEnrolled && !$this->userEnroll->isExpired;    }    /**     * Kursga a'zolikning tugash sanasi     * @return string|null     */    public function getEnrollEndingTime()    {        $begin = strtotime('tomorrow');        $end = strtotime($this->duration, $begin);        return Yii::$app->formatter->asDateUz($end);    }    /**     * Increments enrolls_count when new enroll creates     * This method will be called by     * @see EnrollBehavior::beforeInsert()     */    public function incEnrollsCount()    {        $this->scenario = 'updateEnrollsCount';        $this->enrolls_count++;        $this->save();    }    //</editor-fold>    //<editor-fold desc="IMage" defaultstate="collapsed">    public function getImagePath()    {        return Yii::getAlias('@frontend/web') . $this->image;    }    public function getHasImage()    {        return is_file($this->imagePath);    }    public function getKursImage()    {        $url = $this->getThumbUploadUrl('image');        if (!empty($url)) {            return $url;        }        if (!empty($this->image)) {            return $this->image;        }        return $url ?? Yii::$app->site->getVirtualdarsImage();    }    //</editor-fold>    //<editor-fold desc="Status" defaultstate="collapsed">    public static function statuses()    {        return [            self::STATUS_ACTIVE => 'Faol',            self::STATUS_INACTIVE => 'Nofaol',            self::STATUS_WAITING => 'Waiting',        ];    }    public function getStatusText()    {        return ArrayHelper::getValue(self::statuses(), $this->status, $this->status);    }    public function getStatusLabel()    {        $text = $this->statusText;        switch ($this->status) {            case self::STATUS_ACTIVE:                return '<label class="label label-success">' . $text . '</label>';            case self::STATUS_INACTIVE:                return '<label class="label label-danger">' . $text . '</label>';            case self::STATUS_WAITING:                return '<label class="label label-warning">' . $text . '</label>';            default:                return $this->status;        }    }    public function getIsWaiting()    {        return $this->status == self::STATUS_WAITING;    }    public function getIsConfirmed()    {        return $this->status != self::STATUS_WAITING;    }    //</editor-fold>    //<editor-fold desc="Duration" defaultstate="collapsed">    public function getFreeDurationText()    {        return ArrayHelper::getValue(Yii::$app->site->getKursFreeDurations(), $this->free_duration);    }    public function getDurationText()    {        return ArrayHelper::getValue(Yii::$app->site->getKursDurations(), $this->duration);    }    public function getHasFreeDuration()    {        return !empty($this->free_duration) && intval($this->free_duration > 0);    }    public function getFreeDurationTimestamp()    {        if ($this->hasFreeDuration) {            return '+' . $this->free_duration . ' days';        }        return null;    }    //</editor-fold>    //<editor-fold desc="Benefits" defaultstate="collapsed">    /**     * Kurs benefitlarini array shakli     * Benefitlar db da json shaklida saqlanadi,     * @return array     */    public function getBenefitsAsArray()    {        if (empty($this->benefits)) {            return [];        }        return json_decode($this->benefits);    }    /**     * Kurs benefitlari bormi yo'qmi tekshirish     * @return bool     */    public function getHasBenefits()    {        return !empty($this->benefitsAsArray);    }    /**     * Kurs benefitlarini htmldagi list shakli     * @return string     */    public function getBenefitsList()    {        if (!$this->hasBenefits) {            return '';        }        return Html::ul($this->benefitsAsArray);    }    //</editor-fold>    //<editor-fold desc="Requirements" defaultstate="collapsed">    /**     * Kurs requirementlarini array shakli     * @return array     * @see getBenefitsList()     */    public function getRequirementsAsArray()    {        if (empty($this->requirements)) {            return [];        }        return json_decode($this->requirements);    }    /**     * Kurs requirementlari bormi yo'qmi tekshirish     * @return bool     * @see getHasBenefits()     */    public function getHasRequirements()    {        return !empty($this->requirementsAsArray);    }    /**     * Kurs requirementlarini htmldagi list shakli     * @return string     */    public function getRequirementsList()    {        if (!$this->hasRequirements) {            return '';        }        return Html::ul($this->requirementsAsArray);    }    //</editor-fold>    //<editor-fold desc="Price" defaultstate="collapsed">    public function getFormattedPrice()    {        if ($this->is_free) {            return t('Free');        }        return Yii::$app->formatter->asSum($this->price);    }    public function getHasDiscount()    {        return intval($this->old_price) > intval($this->price);    }    public function getDiscountPercent()    {        $oldPrice = intval($this->old_price);        $price = intval($this->price);        if ($oldPrice <= $price) {            return 0;        }        return 100 - intval(round($price / $oldPrice * 100, 0));    }    public function getFormattedOldPrice()    {        return Yii::$app->formatter->asSum($this->old_price);    }    //</editor-fold>    //<editor-fold desc="Additional" defaultstate="collapsed">    public function getLevelText()    {        return ArrayHelper::getValue(Yii::$app->site->getKursLevels(), $this->level);    }    public function getLanguageText()    {        return ArrayHelper::getValue(Yii::$app->site->getKursLanguages(), $this->language);    }    public function getTitleWithUserFullName()    {        return $this->title . ' (' . $this->user->fullname . ')';    }    public function getIsWished()    {        if (is_guest()) {            return false;        }        return in_array($this->id, user()->wishListAsArray);    }    /**     * @return bool     */    public function getIsBestSeller()    {        return $this->enrolls_count > 50; // todo must change best seller logic    }    public function getFeaturesList()    {        return [            [                'icon' => '<i class="fa fa-list-ol"></i>',                'label' => t('Lessons count'),                'value' => $this->activeLessonsCount,            ],            [                'icon' => '<i class=" flaticon-play-button-1"></i>',                'label' => t('Duration'),                'value' => $this->formattedActiveLessonsDuration,            ],            [                'icon' => '<i class="fa fa-language"></i>',                'label' => t('Language'),                'value' => $this->languageText,            ],            [                'icon' => '<i class="flaticon-flash"></i>',                'label' => t('Level'),                'value' => $this->levelText,            ],            [                'icon' => '<i class="flaticon-user"></i>',                'label' => t('Teacher'),                'value' => $this->user->fullname,            ],            [                'icon' => '<i class="flaticon-key-1"></i>',                'label' => t('Enroll duration'),                'value' => $this->durationText,            ],            [                'icon' => '<i class="fa fa-users"></i>',                'label' => t('Students'),                'value' => $this->enrolls_count,            ],        ];    }    //</editor-fold>    //<editor-fold desc="Enrollment" defaultstate="collapsed">    /**     * @return SActiveQuery     */    public function getCompletedLessons()    {        return $this->getActiveLessons()->joinWith('userLearnedLesson')->andWhere(['learned_lesson.is_completed' => 1]);    }    /**     * @return SActiveQuery     */    public function getCompletedLessonsCount()    {        return intval($this->getCompletedLessons()->count());    }    /**     * User tomonidan shu kursdagi mavzularning necha foizi complete bo'lganligi     * @return int 0-100 gacha bo'lgan sonlar     */    public function getCompletedPercent()    {        $activeLessonsCount = $this->activeLessonsCount;        if ($activeLessonsCount == 0) {            return 0;        }        $completedLessonsCount = $this->completedLessonsCount;        return intval($completedLessonsCount / $activeLessonsCount * 100);    }    public function updateLastLesson($lesson_id)    {        $enroll = $this->userEnroll;        if ($enroll != null) {            $enroll->updateLastLesson($lesson_id);        }    }    public function getLastSeenLesson()    {        $lastLesson = $this->lastActiveLesson;        if ($lastLesson != null) {            return $lastLesson;        }        $lastWatchedMedia = LearnedLesson::find()->joinWith('kurs')            ->joinWith('lesson')            ->andWhere(['kurs.id' => $this->id, 'learned_lesson.user_id' => user('id'), 'lesson.status' => 1])            ->andWhere(['!=', 'lesson.deleted', 1])            ->andWhere(['!=', 'kurs.deleted', 1])            ->latest()            ->one();        return $lastWatchedMedia == null ? null : $lastWatchedMedia->lesson;    }    /**     * @return Lesson|null     */    public function getLastActiveLesson()    {        $enroll = $this->userEnroll;        if ($enroll != null) {            return $this->getActiveLessons()->andWhere(['lesson.id' => $enroll->last_lesson_id])->one();        }        return null;    }    //</editor-fold>    /**     * @return \yii\db\ActiveQuery     */    public function getAuthors()    {        return $this->hasMany(KursUser::class, ['kurs_id' => 'id']);    }}