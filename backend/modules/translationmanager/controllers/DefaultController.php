<?phpnamespace backend\modules\translationmanager\controllers;use Yii;use backend\controllers\BackendController;use backend\modules\translationmanager\models\SourceMessage;use backend\modules\translationmanager\models\SourceMessageSearch;use yii\caching\TagDependency;use yii\web\NotFoundHttpException;/** * DefaultController implements the CRUD actions for SourceMessage model. */class DefaultController extends BackendController{    /**     * Lists all SourceMessage models.     * @return mixed     */    public function actionIndex()    {        $searchModel = new SourceMessageSearch();        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);        return $this->render('index', [            'searchModel' => $searchModel,            'dataProvider' => $dataProvider,        ]);    }    /**     * Displays a single SourceMessage model.     * @param integer $id     * @return mixed     */    public function actionView($id)    {        return $this->render('view', [            'model' => $this->findModel($id),        ]);    }    /**     * Creates a new SourceMessage model.     * If creation is successful, the browser will be redirected to the 'view' page.     * @return mixed     */    public function actionCreate()    {        $model = new SourceMessage([            'category' => 'app',        ]);        if ($model->load(Yii::$app->request->post()) && $model->save()) {            Yii::$app->help->invalidateCache('translate');            return $this->redirect(['index']);        } else {            return $this->render('create', [                'model' => $model,            ]);        }    }    public function actionUpdate($id)    {        $model = $this->findModel($id);        if ($model->load(Yii::$app->request->post()) && $model->save()) {            Yii::$app->help->invalidateCache('translate');            return $this->redirect(['index']);        } else {            return $this->render('update', [                'model' => $model,            ]);        }    }    public function actionDelete($id)    {        $this->findModel($id)->delete();        return $this->redirect(['index']);    }    protected function findModel($id)    {        if (($model = SourceMessage::findOne($id)) !== null) {            return $model;        } else {            throw new NotFoundHttpException('The requested page does not exist.');        }    }    /*public function actionConvert()    {        $models = SourceMessage::find()->all();        foreach ($models as $model){            $kr = Message::findOne(['id' => $model->id, 'language' => 'kr']);            if ($kr == null){                $kr = new Message(['id' => $model->id, 'language' => 'kr']);            }            if ($kr->translation == ''){                $uz = Message::findOne(['id' => $model->id, 'language' => 'uz']);                if ($uz != null){                    $kr->translation = LatinCyrillConvertor::latinToCyrill($uz->translation);                    $kr->save();                }            }        }    }*/}