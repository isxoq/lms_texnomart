<?php/* * @author Shukurullo Odilov <shukurullo0321@gmail.com> * Date: 26.05.2021, 16:14 */namespace soft\components;use backend\models\Region;use phpDocumentor\Reflection\Types\Array_;use Yii;use yii\base\Model;use yii\caching\TagDependency;use yii\helpers\ArrayHelper;use yii\helpers\Html;/** * * @property-read string $modalFooter * @property-write null $language * @property-read string $osName * @property-read mixed $dollarCourse */class   Helper extends Model{    /**     * Ajax CRUD modali uchun footer qismi: create va update actionlar uchun     */    public function getModalFooter()    {        return            Html::button(fa('save') . ' Saqlash', ['class' => 'btn btn-success', 'type' => 'submit'])            .            Html::button(fa('times') . ' Yopish', ['class' => 'btn btn-primary', 'data-dismiss' => 'modal']);    }    /**     * Ajax CRUD modali uchun footer qismi: view action uchun     */    public function getViewFooter($id)    {        return Html::button('Yopish', ['class' => 'btn btn-default pull-left', 'data-dismiss' => 'modal']) .            Html::a('Tahrirlash', ['update', 'id' => $id], ['class' => 'btn btn-primary', 'role' => 'modal-remote']);    }    /**     * Get dollar course from CBU     */    public function getDollarCourse()    {        $session = Yii::$app->session;        if ($session->has('_dollarCourse')) {            return $session->get('_dollarCourse');        }        $url = 'https://cbu.uz/oz/arkhiv-kursov-valyut/json/USD/';        $curl = curl_init();        curl_setopt($curl, CURLOPT_POST, 1);        curl_setopt($curl, CURLOPT_URL, $url);        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);        $result = curl_exec($curl);        curl_close($curl);        $curs = json_decode($result);        $dollarCourse = $curs[0]->Rate;        $session->set('_dollarCourse', $dollarCourse);        return $dollarCourse;    }    /**     * Sayt tilini berilgan $languge ga o'zgartirish     * */    public function setLanguage($language = null)    {        if ($language == null || !key_exists($language, Yii::$app->params['languages'])) {            $language = Yii::$app->params['defaultLanguage'];        }        Yii::$app->language = $language;    }    public function clearPhoneNumber($phoneNumber = '')    {        $tel = trim($phoneNumber);        return strtr($tel, [            '+' => '',            ' ' => '',            '(' => '',            ')' => '',            '-' => '',        ]);    }    /**     * Telefon raqamdan davlat kodi (+998) ni olib tashlaydi     * @param string $phonenumber     * @return false|string|null     */    public function removeCurrencyCode($phonenumber = '')    {        if (empty($phonenumber)) {            return null;        }        $phonenumber = $this->clearPhoneNumber($phonenumber);        $length = strlen($phonenumber);        if ($length > 9) {            $start = $length - 9;            $phonenumber = substr($phonenumber, $start);        }        return $phonenumber;    }    public function getOsName(): string    {        return strtoupper(substr(PHP_OS, 0, 3));    }    public function invalidateCache($tags)    {        TagDependency::invalidate(Yii::$app->cache, $tags);    }    public function virtualdarsTelegramAkkountId()    {        return 1254248080;    }    public function stars($count = 5, $star = '<i class="fa fa-star"></i>', $emptyStar = '<i class="fa fa-star-o"></i>')    {        if ($count > 5) {            $count = 5;        }        if ($count < 0) {            $count = 0;        }        $result = '';        $emptyStarsCount = 5 - $count;        for ($i = 1; $i <= $count; $i++) {            $result .= $star;        }        for ($i = 1; $i <= $emptyStarsCount; $i++) {            $result .= $emptyStar;        }        return $result;    }    //<editor-fold desc="Youtube" defaultstate="collapsed">    public function getYoutubeVideoDuration($youtubeUrl, $apikey)    {        $videoInfo = $this->getYoutubeVideoInfo($youtubeUrl, $apikey);        $duration = ArrayHelper::getValue($videoInfo, 'items.0.contentDetails.duration');        if ($duration) {            preg_match('/(\d+)H/', $duration, $hourMatches);            preg_match('/(\d+)M/', $duration, $minutMatches);            preg_match('/(\d+)S/', $duration, $secondMatches);            $hours = !empty($hourMatches) ? $hourMatches[1] : 0;            $minutes = !empty($minutMatches) ? $minutMatches[1] : 0;            $seconds = !empty($secondMatches) ? $minutMatches[1] : 0;            return $hours * 3600 + $minutes * 60 + $seconds;        }    }    public function getYoutubeVideoInfo($youtubeUrl, $apikey)    {        $curl = curl_init();        $videoId = $this->getVideoIdFromYoutubeUrl($youtubeUrl);        curl_setopt_array($curl, array(            CURLOPT_URL => "https://youtube.googleapis.com/youtube/v3/videos?id=$videoId&key=$apikey&part=contentDetails",            CURLOPT_RETURNTRANSFER => true,            CURLOPT_ENCODING => '',            CURLOPT_MAXREDIRS => 10,            CURLOPT_TIMEOUT => 0,            CURLOPT_FOLLOWLOCATION => true,            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,            CURLOPT_CUSTOMREQUEST => 'GET',        ));        $response = curl_exec($curl);        curl_close($curl);        return json_decode($response);    }    public function getVideoIdFromYoutubeUrl($youtubeUrl)    {        parse_str(parse_url($youtubeUrl, PHP_URL_QUERY), $array);        return ArrayHelper::getValue($array, 'v');    }    //</editor-fold>}?>