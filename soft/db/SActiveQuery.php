<?phpnamespace soft\db;use yii\data\Pagination;use yii\db\ActiveRecord;use yii\db\Expression;/** * This is the query class for SActiveRecord * * @property string $tableName */class SActiveQuery extends \yii\db\ActiveQuery{    private $_tableName;    use MultilingualQueryTrait;    public function active()    {        return $this->andWhere([$this->tableName . '.status' => 1]);    }    public function deleted($deleted = true)    {        return $this->andWhere([$this->tableName . '.deleted' => $deleted]);    }    public function nonDeleted()    {        return $this->andWhere(['!=', $this->tableName . '.deleted', '1']);    }    public function latest($limit = 0)    {        $query = $this->addOrderBy([$this->tableName . '.created_at' => SORT_DESC]);        if ($limit > 0) {            $query->limit($limit);        }        return $query;    }    public function paginate($defaultPageSize = 20)    {        $pagination = new Pagination([            'defaultPageSize' => $defaultPageSize,            'totalCount' => $this->count()        ]);        $model = $this->offset($pagination->offset)            ->limit($pagination->limit)            ->all();        return [            'pagination' => $pagination,            'model' => $model,        ];    }    public function id($id = '')    {        return $this->andWhere([$this->tableName . '.id' => $id]);    }    public function slug($slug = '')    {        return $this->andWhere([$this->tableName . '.slug' => $slug]);    }    /**     * Foydalanuvchining o'ziga tegishli datani topish     * Bunda tableda user_id degan maydon bo'lishi zarur     * @return SActiveQuery     */    public function own()    {        return $this->andWhere([$this->tableName . '.user_id' => user('id')]);    }    public function without($relation)    {        if (isset($this->with[$relation])) {            unset($this->with[$relation]);        }        return $this;    }    /**     * @param int $limit     * @return $this     */    public function random($limit = 0)    {        $this->orderBy(new Expression('rand()'));        if ($limit > 0) {            $this->limit($limit);        }        return $this;    }    /**     * Bugungi sanadagi ma'lumotlarni ajratib oladi     * @param string $attribute bazadan qaysi attribute bo'yicha ajratib olish kerakligi     * @return $this     */    public function today($attribute = 'created_at')    {        $begin = strtotime('today');        $end = strtotime('tomorrow');        $attribute = $this->attributeWithTableName($attribute);        return $this->andWhere(['>=', $attribute, $begin])            ->andWhere(['<', $attribute, $end]);    }    private function attributeWithTableName($attribute)    {        return $this->tableName . '.' . $attribute;    }    public function getTableName()    {        if ($this->_tableName == null) {            /* @var $modelClass ActiveRecord */            $modelClass = $this->modelClass;            $tableName = $modelClass::tableName();            $this->setTableName($tableName);        }        return $this->_tableName;    }    /**     * @param mixed $tableName     */    public function setTableName($tableName): void    {        $this->_tableName = $tableName;    }}?>