<?phpnamespace soft\db;use soft\behaviors\InvalidateCacheBehavior;use Yii;use soft\helpers\SArray;use soft\behaviors\SAuthorBehavior;use soft\traits\ModelConfigTrait;use yeesoft\multilingual\behaviors\MultilingualBehavior;use yii\behaviors\TimestampBehavior;use yii\db\ActiveRecord;/** * * @property bool $isViewable * @property bool $isUpdatable * @property-read bool $isAuthor * @property-read string $error * @property-read mixed $translations * @property-read array $attributeNames * @property bool $isDeletable * * @method getTranslations() * @method SActiveQuery hasMany($class, array $link)() * @method SActiveQuery hasOne($class, array $link)() */class SActiveRecord extends ActiveRecord{    use SActiveRecordFindTrait;    use ModelConfigTrait;    use MultilingualTrait;    public const STATUS_ACTIVE = 1;    public const STATUS_INACTIVE = 0;    #region Vars    public $softDelete = false;    #endregion    #region Behaviors    /**     * @return array     * @throws \Exception     */    public function behaviors()    {        $behaviors = parent::behaviors();        $attributeNames = $this->getAttributeNames();        // Author behavior will automatically fill 'created by attribute' , defaults to 'user_id'        $createdByAttribute = SArray::getValue($attributeNames, 'createdByAttribute');        if ($createdByAttribute != false){            $behaviors[] = [                'class' => SAuthorBehavior::className(),                'createdByAttribute' => $createdByAttribute,            ];        }//      Timestamp Behaviors        $createdAtAttribute = SArray::getValue($attributeNames, 'createdAtAttribute');        $updatedAtAttribute = SArray::getValue($attributeNames, 'updatedAtAttribute');        if ($createdAtAttribute != false && $updatedAtAttribute != false){            $behaviors[] = [                'class' => TimestampBehavior::className(),                'createdAtAttribute' => $createdAtAttribute,                'updatedAtAttribute' => $updatedAtAttribute,            ];        }        $invalidateCacheTags = SArray::getValue($attributeNames, 'invalidateCacheTags');        if (!empty($invalidateCacheTags)){            $behaviors[] = [              'class' => InvalidateCacheBehavior::class,              'tags' => $invalidateCacheTags            ];        }//            multilingual behaviors        if ($this->getHasMultilingualAttributes()) {            $behaviors['multilingual'] = [                'class' => MultilingualBehavior::className(),                'languages' => $this->languages(),                'attributes' => $this->getMultilingualAttributes(),            ];        }        return array_merge(parent::behaviors(), $behaviors);    }    /**     * @param $name     * @return bool     */    public function isAttribute($name)    {        if ($name) {            return parent::hasAttribute($name) || $this->isMultilingualAttribute($name);        } else return false;    }    #endregion    /**     * @inheritdoc     */    public function fields()    {        $fields = parent::fields();        if ($this->getHasMultilingualAttributes()) {            $fields = array_merge($fields, $this->getMultilingualAttributes());        }        return $fields;    }    #region AttributeLabels    /**     * @return array     */    public function setAttributeLabels()    {        return [];    }    /**     * @return array|string[]     */    public function attributeLabels()    {        $defaultLabels = [            'id' => 'ID',            'name' => 'Nomi',            'title' => 'Sarlavha',            'text' => 'Matn',            'description' => 'Tavsif',            'content' => 'Kontent',            'image' => 'Rasm',            'status' => 'Status',            'user_id' => 'Muallif',            'user.fullname' => 'Muallif',            'slug' => 'Slug',            'created_at' => 'Yaratildi',            'updated_at' => 'Tahrirlandi',            'icon' => 'Icon',        ];        $modelLabels = $this->setAttributeLabels();        return array_merge($defaultLabels, $modelLabels);    }    /**     * @param string $attribute     * @return string     */    public function getAttributeLabel($attribute)    {        if ($this->getHasMultilingualAttributes() && $this->isAttributeMultilingual($attribute)) {            return $this->getMultilingualAttributeLabel($attribute);        } else {            return parent::getAttributeLabel($attribute);        }    }    #endregion    #region Additional methods for child classes    /**     * Jadvaldagi Barcha yozuvlarni topish     * @param int $limit     * @param int $offset     * @return static[]     */    public static function getAll($limit = 0, $offset = 0)    {        $query = static::find();        if ($limit > 0) $query->limit($limit);        if ($offset > 0) $query->offset($offset);        return $query->all();    }    #endregion    #region Additional methods for child class objects    /**     * @return array     */    public function setAttributeNames()    {        return [];    }    /**     * Behavior configs     * @return array     */    public function getAttributeNames(): array    {        $defaultAttributeNames = [            'createdByAttribute' => false,//            Timestamp attributes            'createdAtAttribute' => false,            'updatedAtAttribute' => false,//            Attributes for MultilingiualBehavior            'multilingualAttributes' => [],//            Tags for InvalidateCacheBehavior            'invalidateCacheTags' => null,            // this attribute required when softDelete property is true,            // if softDelete property is true, this attribute value will be true (1)            // and data will not be deleted from db            'deletedAttribute' => 'deleted',        ];        $modelAttributeNames = $this->setAttributeNames();        return array_merge($defaultAttributeNames, $modelAttributeNames);    }    /**     * Checks whether current user is the author of this record     */    public function getIsAuthor()    {        $createdByAttribute = $this->createdByAttribute;        if ($createdByAttribute === false) {            return false;        }        return Yii::$app->user->identity->id === $this->user_id;    }    #endregion    #region GridView configs    /**     *   Columns for GridView     */    public function columns()    {        return [];    }    #endregion    #region CRUD configs    /**     * For CRUD actions     */    public function getIsDeletable()    {        return $this->isNewRecord ? true : $this->deleteConditions();    }    /**     * @return bool     */    public function deleteConditions()    {        return true;    }    /**     * @return bool     */    public function getIsUpdatable()    {        return $this->isNewRecord ? true : $this->updateConditions();    }    /**     * @return bool     */    public function updateConditions()    {        return true;    }    /**     * @return bool     */    public function getIsViewable()    {        return $this->isNewRecord ? true : $this->viewConditions();    }    /**     * @return bool     */    public function viewConditions()    {        return true;    }    #endregion    /**     * @return string the first error text of the model after validating     * */    public function getError()    {        $firstErrors = $this->getFirstErrors();        if (empty($firstErrors)){            return '';        }        $values = array_values($firstErrors);        return $values[0];    }    /**     * @return bool     */    public function loadPost()    {        return $this->load(Yii::$app->request->post());    }    /**     * @return bool     */    public function loadSave()    {        return $this->load(Yii::$app->request->post()) && $this->save();    }    /**     * @return bool     */    public function loadValidate()    {        return $this->load(Yii::$app->request->post()) && $this->validate();    }    /**     * @return bool     * @throws \Exception     */    public function beforeDelete()    {        if (!parent::beforeDelete()) {            return false;        }        if (!$this->softDelete) {            return true;        } else {            $deletedAttribute = SArray::getValue($this->getAttributeNames(), 'deletedAttribute', 'deleted');            $this->{$deletedAttribute} = 1;            $this->save();            return false;        }    }}