<?phpnamespace soft\form;use kartik\builder\Form;use kartik\helpers\Html;use soft\helpers\SArray;use soft\service\InputType;class SFormOld extends Form{    const INPUT_STATUS = 'status';    const INPUT_ELFINDER = 'elfinder';    const INPUT_CKEDITOR = 'ckeditor';    protected static $_widgetInputs = [        self::INPUT_STATUS => true,        self::INPUT_ELFINDER => true,        self::INPUT_CKEDITOR => true,    ];    public $attributeDefaults = ['type' => Form::INPUT_TEXT];    public function init()    {        $this->attributes = $this->generateAttributes($this->attributes);        parent::init();    }    protected function generateAttributes($attributes = [])    {        $result = [];        foreach ($attributes as $key => $setting) {            if (SArray::getValue($setting, 'visible', true) === true) {                if (isset($setting['attributes'])) {                    $result[$key] = $setting;                    $result[$key]['attributes'] = $this->generateAttributes($setting['attributes']);                } else {                    if (is_array($setting)) {                        $result[$key] = $this->generateConfigs($key, $setting);                    } else {                        $result[$setting] = $this->generateConfigs($setting);                    }                }            }        }        return $result;    }    /**     * Kartik FormBuilder uchun configni generatsiya qilish     * $customConfigs - bu SForm builderni generatsiya qilayotganda user tomonidan     * berilgan configlar     */    public function generateConfigs($attribute, $customConfigs = [])    {        $model = $this->model;        $attributeConfigs = $model->getAttributeConfigs($attribute);        SArray::keyReplace($attributeConfigs, 'inputType', 'type', 'textInput');        $config = SArray::mergeReplace($attributeConfigs, $customConfigs, ['items', 'options', 'map.array']);        $model->generateItems($config);        //            set configs for input widget        if (InputType::getInputCategory($config['type']) == 'widgets') {            $config['widgetClass'] = $config['type'];            $config['type'] = InputType::WIDGET;            // set configs for [[kartik\widgets\Select2]]            if ($config['widgetClass'] == InputType::SELECT2) {                $config['options']['data'] = $config['items'];                unset($config['items']);                $config['options']['pluginOptions']['allowClear'] = true;                SArray::setValueIfNoValid($config, 'options.options.placeholder', \Yii::t('app', 'Select...'));            }        }        return $config;    }    protected function getSubAttributesContent($settings, $index)    {        $subIndex = 0;        $defaultSubColOptions = SArray::getValue($settings, 'subColumnOptions', $this->columnOptions);        $content = '';        $content .= "\t" . $this->beginTag('div', $this->rowOptions) . "\n";        $attrCount = count($settings['attributes']);        $cols = SArray::getValue($settings, 'columns', $attrCount);        foreach ($settings['attributes'] as $subAttr => $subSettings) {            $subColWidth = (int)(self::GRID_WIDTH / $cols);            $subSettings = array_replace_recursive($this->attributeDefaults, $subSettings);            $subColOptions = SArray::getValue($subSettings, 'columnOptions', $defaultSubColOptions);            if (isset($subColOptions['colspan'])) {                $subColWidth = (int)$subColWidth * (int)($subColOptions['colspan']);                unset($subColOptions['colspan']);            }            Html::addCssClass($subColOptions, 'col-' . $this->columnSize . '-' . $subColWidth);            $subSettings['columnOptions'] = $subColOptions;            $subSettings['fieldConfig']['skipFormLayout'] = true;            $content .= "\t\t" . $this->beginTag('div', $subColOptions) . "\n";            /** @var integer $index */            $content .= "\t\t\t" . $this->parseInput($subAttr, $subSettings, $index * 10 + $subIndex) . "\n";            $subIndex++;            $content .= "\t\t" . $this->endTag('div') . "\n";        }        $content .= "\t" . $this->endTag('div') . "\n";        return $content;    }}?>