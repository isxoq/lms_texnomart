<?phpnamespace soft\kartik;use soft\form\SForm;use soft\helpers\SArray;use soft\service\InputType;class SDetailView_old extends \kartik\detail\DetailView{    public $hover = true;    public function init()    {        SArray::setValueIfNoValid($this->panel, 'type', self::TYPE_PRIMARY);        $this->generateAttributes();        parent::init();    }    public function generateAttributes(){        $attributes = [];        foreach ($this->attributes as $key => $value) {            // agar berilgan qiymat faqat attribut nomidan iborat bo'lsa            if (is_string($value)) {                $attributeConfigs = $this->generateConfigs($value);            }            else{//                agar element 'group' elementidan iborat bo'lsa                if (array_key_exists('group', $value)){                    SArray::setValueIfNoValid($value, 'rowOptions.class', 'table-info');                    $attributes[] = $value;                    continue;                }//                agar view faylda attributga qo'shimcha configlar berilgan bo'lsa...                $attributeConfigs = $this->generateConfigs($key, $value);            }            $attribute = $attributeConfigs['attribute'];            if ($this->model->isMultilingualAttribute($attribute )){                foreach ($this->model->generateMultilingualAttributes($attribute) as $mAttribute){                    $config = $attributeConfigs;                    $config['attribute'] = $mAttribute;                    $attributes[] = $config;                }            }            else{                $attributes[] = $attributeConfigs;            }        }        $this->attributes = $attributes;    }    /**     * Kartik DetailView uchun configni generatsiya qilish     * $customConfigs - bu SDetailViewni generatsiya qilayotganda user tomonidan     * berilgan configlar     */    public function generateConfigs($attribute, $customConfigs = []){        $model = $this->model;        $attributeConfigs = $model->getAttributeConfigs($attribute);        SArray::keyReplace($attributeConfigs, 'inputType', 'type', 'textInput');        $config = SArray::mergeReplace($attributeConfigs , $customConfigs, ['items', 'options', 'map.array']);        $config['attribute'] = $attribute;        if ($attribute === 'id'){            unset($config['type']);            $config['readOnly'] = true;            return $config;        }        $model->generateItems($config);        //   agar input type InputType::$widgets da berilgan widgetlardan biri bo'lsa, ...        if (InputType::getInputCategory($config['type']) == 'widgets'){            // set configs for [[kartik\widgets\Select2]]            if ($config['type'] == InputType::SELECT2 ) {                $config['options']['data'] = $config['items'];                unset($config['items']);                SArray::setValueIfNoValid($config, 'options.options.placeholder' , \Yii::t('app', 'Select...'));            }            SArray::keyReplace($config, 'options', 'widgetOptions', []);        }        //  agar input type InputType::$widgets da berilgan widgetlardan boshqa widgetga teng bo'lsa, ...        if ($config['type'] == InputType::WIDGET ){            SArray::keyReplace($config, 'options', 'widgetOptions');            SArray::setValue($config, 'widgetOptions.class', $config['widgetClass']);            unset($config['widgetClass']);        }        return $config;    }}