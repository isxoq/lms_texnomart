<?php 	namespace soft\traits;	use Yii;	use soft\helpers\SArray;	use soft\service\InputType;    use yii\helpers\ReplaceArrayValue;    /**	 * @author Shukurullo Odilov	 * SActiveRecorddan extend qilingan Modellar uchun sozlamalar	*/	trait ModelConfigTrait{		/**		 * Barcha modellar uchun berilgan attributlar bo'yicha umumiy configlar		*/		public function getDefaultConfigs(){			return [				'id' => [					'inputType' => InputType::STATIC,				],				'status' => [				    'format' => 'status',                    'inputType' => InputType::WIDGET,                    'widgetClass' => InputType::SWITCH,                    'options' => [                        'pluginOptions' => [                            'onText' => Yii::t('app', 'Active'),                            'offText' => Yii::t('app', 'Inactive'),                        ],                    ],				],                'description' => [                    'inputType' => InputType::TEXTAREA,                ],                'created_at' => [                    'format' => 'datetime',                    'displayOnly' => true,                    'filter' => false,                ],                'updated_at' => [                    'format' => 'datetime',                    'displayOnly' => true,                    'filter' => false,                ],                'content' => [                    'format' => 'html',                    'inputType' => InputType::WIDGET,                    'widgetClass' => '\mihaildev\ckeditor\CKEditor',                ]			];		}		/**		 * ModelConfigs - har bir modelning o'zidagi configlar		 * Bu metoddagi configlar Modelning o'zida beriladi		*/		public function getModelConfigs()        {		    return [];		}		/**		 * Modeldagi  $attributga tegishli configlar		*/		public function getAttributeConfigs($attribute)        {		    $defaultConfigs = SArray::getValue($this->getDefaultConfigs(), $attribute, []); 		    $modelConfigs = SArray::getValue($this->getModelConfigs(), $attribute, []);		    return SArray::mergeReplace($defaultConfigs, $modelConfigs, ['items', 'options', 'map.array']);		}        /**         * dropdownInput uchun attribute configlari bo'yicha items generatsiya qiladi         * agar $config['items'] mavjud bo'lmasa yoki nullga teng bo'lsa,         * $config['items'] ning qiymati [[ArrayHelper::map()]] metodi orqali generatsiya qilinadi         * bunda metodning argumentlari $config['map'] dan olinadi         * @param array $config         * @throws \Exception         */        public function generateItems(&$config){            if (SArray::keyValids($config,'items') ) {                unset($config['map']);                return;            }            // [[ArrayHelper::map()]] metodi orqali map generatsiya qilish            $array = SArray::getValue($config, 'map.array', []);            $from = SArray::getValue($config, 'map.from', 'id');            $to = SArray::getValue($config, 'map.to', 'name');            if ($array instanceof ReplaceArrayValue) {                $array = $array->value;            }            $config['items'] = SArray::map($array, $from, $to);            unset($config['map']);        }	}?>