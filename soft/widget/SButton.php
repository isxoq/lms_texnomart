<?phpnamespace soft\widget;use soft\helpers\SHtml;use yii\helpers\Html;use soft\base\SWidgetBase;use soft\helpers\SArray;use soft\extra\SToggle;/** * @author Shukurullo Odilov */class SButton extends SWidgetBase{    public const TYPE_LINK = 'link';    public const TYPE_BUTTON = 'button';    public const TYPE_SUBMIT = 'submit';    /**     * Bootstrap (3 and 4) Button styles     */    public const STYLE = [        'info' => 'btn-info',        'primary' => 'btn-primary',        'success' => 'btn-success',        'danger' => 'btn-danger',        'warning' => 'btn-warning',        'link' => 'btn-link',        'default' => 'btn-default',        'secondary' => 'btn-secondary',        'light' => 'btn-light',        'dark' => 'btn-dark',    ];    /**     * Bootstrap Button Sizes     */    public const SIZE = [        'default' => '',        'lg' => 'btn-lg',        'md' => 'btn-md',        'sm' => 'btn-sm',        'xs' => 'btn-xs',    ];    /**     * Bootstrap 4 Button outline Styles     */    public const OUTLINE = [        'default' => '',        'primary' => 'btn-outline-primary',        'secondary' => 'btn-outline-secondary',        'success' => 'btn-outline-success',        'danger' => 'btn-outline-danger',        'warning' => 'btn-outline-warning',        'info' => 'btn-outline-info',        'light' => 'btn-outline-light',        'dark' => 'btn-outline-dark',    ];    public $_config = [        'visible' => true,        'type' => self::TYPE_LINK,        'btn' => true,        'style' => self::STYLE['primary'],        'size' => self::SIZE['default'],        'outline' => self::OUTLINE['default'],        'url' => '#',        'options' => [],        'label' => "",        'icon' => false,        'title' => false,        // Toggle Options        'toggle' => SToggle::toggle['tooltip'],        'toggleOptions' => [],        // agar pjax => false  bo'lsa,  'options[]' ga 'data-pjax' => 0 element qo'shiladi        'pjax' => true,        // agar modal => true  bo'lsa,  'options[]' ga 'role' => 'modal-remote' element qo'shiladi        'modal' => false,    ];    public $_events = [];    public function main()    {        $this->html = $this->_config['visible'] ? $this->renderButton() : "";    }    public function renderButton()    {        // Add css classes        if ($this->_config['btn']) {            Html::addCssClass($this->_config['options'], ['btn', $this->_config['style'], $this->_config['size'], $this->_config['outline']]);        }        // Add icon if true        if ($this->_config['icon']) {            $this->_config['label'] = SHtml::withIcon($this->_config['label'] , $this->_config['icon'] );        }        // Add ID        SArray::setValueIfNoValid($this->_config['options'], 'id', $this->getId());        // Add title        SArray::setValueIfNoValid($this->_config['options'], 'title', $this->_config['title']);        // Add data-pjax option if pjax false        if (!$this->_config['pjax']) {            $this->_config['options']['data-pjax'] = 0;        }        // Add 'role' => 'modal-remote' option if modal true        if ($this->_config['modal']) {            $this->_config['options']['role'] = "modal-remote";        }        // Render toggle if true        if ($this->_config['toggle']) {            SToggle::render($this->_config['options'], $this->_config['toggle'], $this->_config['toggleOptions']);        }        // Render Button        if ($this->_config['type'] == self::TYPE_BUTTON) {            return Html::button($this->_config['label'], $this->_config['options']);        } elseif ($this->_config['type'] == self::TYPE_SUBMIT) {            return Html::submitButton($this->_config['label'], $this->_config['options']);        } else {            return Html::a($this->_config['label'], $this->_config['url'], $this->_config['options']);        }    }}?>